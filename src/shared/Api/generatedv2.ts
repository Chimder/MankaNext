/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Manka Api
 * Manga search
 * OpenAPI spec version: 1.0
 */
import { customInstance } from './axios.instance';
import type { BodyType } from './axios.instance';
export type GetUserFavoriteMangaParams = {
/**
 * email
 */
email: string;
/**
 * name
 */
name: string;
};

export type GetUserListMangaParams = {
/**
 * email
 */
email: string;
};

export type DeleteUserParams = {
/**
 * email
 */
email: string;
};

export type GetMangaByNameParams = {
/**
 * Name of the Manga
 */
name: string;
};

export type FilterAnimeParams = {
/**
 * Name of the Manga
 */
name?: string;
/**
 * Chapter of the Manga
 */
genres?: string[];
/**
 * Name of the Manga
 */
status?: string;
/**
 * Chapter of the Manga
 */
country?: string;
/**
 * field of the Manga
 */
orderField?: string;
/**
 * sort of the Manga
 */
orderSort?: string;
/**
 * page not 0
 */
page?: number;
/**
 * perPage
 */
perPage?: number;
};

export interface HandlerUserSwag {
  createdAt?: string;
  email?: string;
  favorite?: string[];
  id?: string;
  image?: string;
  name?: string;
}

export interface HandlerSuccessResponse {
  success?: string;
}

export interface HandlerMangaSwag {
  author?: string;
  averageRating?: number;
  chapters?: HandlerChapterSwag[];
  country?: string;
  describe?: string;
  genres?: string[];
  id?: number;
  img?: string;
  imgHeader?: string;
  name?: string;
  popularity?: number;
  published?: number;
  ratingCount?: number;
  status?: string;
}

export interface HandlerFavoriteResponse {
  isFavorite?: boolean;
}

export interface HandlerChapterSwag {
  animeName?: string;
  chapter?: number;
  createdAt?: string;
  genres?: string[];
  name?: string;
}




// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;


  /**
 * Find Manga Chapter
 * @summary Get a chapter
 */
export const filterAnime = (
    params?: FilterAnimeParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<HandlerMangaSwag[]>(
      {url: `/filter`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Retrieve a manga by its name
 * @summary Get a manga by name
 */
export const getMangaByName = (
    params: GetMangaByNameParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<HandlerMangaSwag>(
      {url: `/manga`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Find Manga Chapter
 * @summary Get a chapter
 */
export const getChapter = (
    name: string,
    chapter: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<HandlerChapterSwag>(
      {url: `/manga/${name}/${chapter}`, method: 'GET'
    },
      options);
    }
  
/**
 * Retrieve a list of all mangas
 * @summary Get all mangas
 */
export const getAllMangas = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<HandlerMangaSwag[]>(
      {url: `/mangas`, method: 'GET'
    },
      options);
    }
  
/**
 * Retrieve a list of popular mangas
 * @summary Get popular mangas
 */
export const getPopularManga = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<HandlerMangaSwag[]>(
      {url: `/popular`, method: 'GET'
    },
      options);
    }
  
/**
 * Retrieve a user its email
 * @summary Get a user by email
 */
export const getUserByEmail = (
    email: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<HandlerUserSwag>(
      {url: `/user/${email}`, method: 'GET'
    },
      options);
    }
  
/**
 * Create
 * @summary Create or cheack user
 */
export const createOrCheackUser = (
    createOrCheackUserBody: BodyType<string>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<HandlerUserSwag>(
      {url: `/user/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrCheackUserBody
    },
      options);
    }
  
/**
 * Delete user
 * @summary delete user by email
 */
export const deleteUser = (
    params: DeleteUserParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<HandlerSuccessResponse>(
      {url: `/user/delete`, method: 'DELETE',
        params
    },
      options);
    }
  
/**
 * Toggle manga
 * @summary Toggle Favorite manga
 */
export const toggleFavoriteManga = (
    name: string,
    email: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<HandlerSuccessResponse>(
      {url: `/user/favorite/${name}/${email}`, method: 'POST'
    },
      options);
    }
  
/**
 * User Favorites
 * @summary User favorite Mangas
 */
export const getUserListManga = (
    params: GetUserListMangaParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<HandlerMangaSwag[]>(
      {url: `/user/favorite/list`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * User Favorite
 * @summary User favorite Manga
 */
export const getUserFavoriteManga = (
    params: GetUserFavoriteMangaParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<HandlerFavoriteResponse>(
      {url: `/user/favorite/one`, method: 'GET',
        params
    },
      options);
    }
  
export type FilterAnimeResult = NonNullable<Awaited<ReturnType<typeof filterAnime>>>
export type GetMangaByNameResult = NonNullable<Awaited<ReturnType<typeof getMangaByName>>>
export type GetChapterResult = NonNullable<Awaited<ReturnType<typeof getChapter>>>
export type GetAllMangasResult = NonNullable<Awaited<ReturnType<typeof getAllMangas>>>
export type GetPopularMangaResult = NonNullable<Awaited<ReturnType<typeof getPopularManga>>>
export type GetUserByEmailResult = NonNullable<Awaited<ReturnType<typeof getUserByEmail>>>
export type CreateOrCheackUserResult = NonNullable<Awaited<ReturnType<typeof createOrCheackUser>>>
export type DeleteUserResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
export type ToggleFavoriteMangaResult = NonNullable<Awaited<ReturnType<typeof toggleFavoriteManga>>>
export type GetUserListMangaResult = NonNullable<Awaited<ReturnType<typeof getUserListManga>>>
export type GetUserFavoriteMangaResult = NonNullable<Awaited<ReturnType<typeof getUserFavoriteManga>>>
